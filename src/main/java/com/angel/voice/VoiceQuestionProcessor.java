package com.angel.voice;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import java.util.concurrent.CompletableFuture;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.angel.avatar.WebSocketService;
import com.angel.config.ConfigManager;
import com.angel.ui.AvatarController;
import com.angel.util.LogUtil;

/**
 * Version am√©lior√©e du processeur de questions vocales avec synth√®se vocale int√©gr√©e.
 * Compatible avec l'API existante d'AngelApplication.
 * 
 * Fichier : src/main/java/com/angel/voice/EnhancedVoiceQuestionProcessor.java
 */
@Component
public class VoiceQuestionProcessor {

    private static final Logger LOGGER = LogUtil.getLogger(VoiceQuestionProcessor.class);
    
    @Autowired
    private ConfigManager configManager;
    
    @Autowired
    private AvatarController avatarController;
    
    @Autowired
    private WebSocketService webSocketService;
    
    /**
     * G√©n√®re le message d'activation personnalis√© (compatible avec AngelApplication).
     */
    public CompletableFuture<String> generateActivationMessage() {
        return CompletableFuture.supplyAsync(() -> {
            String userName = getUserName();
            String greeting = getTimeBasedGreeting();
            String questionPrompt = "que voulez-vous savoir ?";
            
            String message;
            if (userName != null && !userName.trim().isEmpty()) {
                message = String.format("%s %s, %s", greeting, userName, questionPrompt);
            } else {
                message = String.format("%s, %s", greeting, questionPrompt);
            }
            
            // D√©clencher imm√©diatement la synth√®se vocale
            sendSpeechMessage(message, "friendly");
            
            return message;
        });
    }
    
    /**
     * Traite une question ou commande vocale (compatible avec AngelApplication).
     */
    public CompletableFuture<String> processQuestion(String input, float confidence, VoiceQuestionContext context) {
        LOGGER.log(Level.INFO, "üó£Ô∏è Traitement question vocale: {0} (confidence: {1})", 
                  new Object[]{input, confidence});
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                // Validation de l'entr√©e
                if (!isValidInput(input, confidence)) {
                    String errorMsg = "Je n'ai pas bien compris. Pouvez-vous r√©p√©ter ?";
                    sendSpeechMessage(errorMsg, "apologetic");
                    return errorMsg;
                }
                
                // Analyser et r√©pondre
                String answer = analyzeAndAnswer(input);
                
                // D√©terminer l'√©motion appropri√©e
                String emotion = determineEmotionForAnswer(input, answer);
                
                // Affichage visuel dans l'avatar
                avatarController.displayMessage(answer, emotion, calculateDisplayDuration(answer));
                
                // D√âCLENCHER LA SYNTH√àSE VOCALE
                sendSpeechMessage(answer, emotion);
                
                return answer;
                
            } catch (Exception e) {
                LOGGER.log(Level.SEVERE, "Erreur traitement question vocale", e);
                String errorMsg = "D√©sol√©, je n'ai pas pu traiter votre demande.";
                sendSpeechMessage(errorMsg, "apologetic");
                return errorMsg;
            }
        });
    }
    
    /**
     * Version simplifi√©e pour compatibilit√© (sans context).
     */
    public CompletableFuture<String> processVoiceInput(String input, float confidence) {
        return processQuestion(input, confidence, null);
    }
    
    /**
     * NOUVELLE M√âTHODE: Envoie un message pour synth√®se vocale via WebSocket.
     */
    private void sendSpeechMessage(String text, String emotion) {
        if (!configManager.getBoolean("voice.speech.enabled", true)) {
            LOGGER.log(Level.FINE, "Synth√®se vocale d√©sactiv√©e dans la configuration");
            return;
        }
        
        try {
            LOGGER.log(Level.INFO, "üéØ D√âCLENCHEMENT SYNTH√àSE VOCALE: \"{0}\" (√©motion: {1})", 
                      new Object[]{text, emotion});
            
            // Cr√©er le message pour le frontend
            String message = String.format(
                "{\"type\":\"AVATAR_SPEAK\",\"text\":\"%s\",\"emotion\":\"%s\",\"timestamp\":%d}",
                text.replace("\"", "\\\""),
                emotion,
                System.currentTimeMillis()
            );
            
            // Envoyer via WebSocket - utiliser la m√©thode qui existe dans votre WebSocketService
            if (webSocketService.hasConnectedAvatarSessions()) {
                webSocketService.getActiveSessions().values().forEach(session -> {
                    try {
                        if (session.isOpen()) {
                            session.sendMessage(new org.springframework.web.socket.TextMessage(message));
                        }
                    } catch (Exception e) {
                        LOGGER.log(Level.WARNING, "Erreur envoi message vocal √† une session", e);
                    }
                });
            }
            
            LOGGER.log(Level.INFO, "‚úÖ Message vocal envoy√© au frontend");
            
        } catch (Exception e) {
            LOGGER.log(Level.WARNING, "Erreur lors du d√©clenchement de la synth√®se vocale", e);
        }
    }
    
    /**
     * Obtient le pr√©nom configur√© de l'utilisateur.
     */
    private String getUserName() {
        return configManager.getString("user.name", "");
    }
    
    /**
     * G√©n√®re une salutation bas√©e sur l'heure.
     */
    private String getTimeBasedGreeting() {
        LocalDateTime now = LocalDateTime.now();
        int hour = now.getHour();
        
        if (hour >= 5 && hour < 12) {
            return "Bonjour";
        } else if (hour >= 12 && hour < 17) {
            return "Bon apr√®s-midi";
        } else if (hour >= 17 && hour < 21) {
            return "Bonsoir";
        } else {
            return "Bonne soir√©e";
        }
    }
    
    /**
     * Valide si une entr√©e est acceptable pour traitement.
     */
    private boolean isValidInput(String input, float confidence) {
        if (input == null || input.trim().isEmpty()) {
            return false;
        }
        
        float minConfidence = configManager.getFloat("voice.recognition.confidence.minimum", 0.6f);
        if (confidence < minConfidence) {
            LOGGER.log(Level.FINE, "Entr√©e rejet√©e - confiance trop faible: {0}", confidence);
            return false;
        }
        
        return true;
    }
    
    /**
     * Analyse l'entr√©e et g√©n√®re une r√©ponse appropri√©e.
     */
    private String analyzeAndAnswer(String input) {
        String lowerInput = input.toLowerCase().trim();
        
        // Questions sur l'heure
        if (containsKeywords(lowerInput, "heure", "temps") && 
            containsKeywords(lowerInput, "quelle", "il est", "maintenant")) {
            return getTimeResponse();
        }
        
        // Questions sur la date
        if (containsKeywords(lowerInput, "date", "jour", "aujourd'hui", "quel jour")) {
            return getDateResponse();
        }
        
        // Questions m√©t√©o
        if (containsKeywords(lowerInput, "m√©t√©o", "temps qu'il fait", "temp√©rature", "pluie", "soleil")) {
            return "Pour la m√©t√©o, consultez votre application m√©t√©o habituelle ou regardez par la fen√™tre.";
        }
        
        // Questions TV/programmes
        if (containsKeywords(lowerInput, "t√©l√©", "tv", "programme", "cha√Æne", "√©mission")) {
            return getTVResponse();
        }
        
        // Questions actualit√©s
        if (containsKeywords(lowerInput, "actualit√©", "news", "nouvelles", "infos", "journal")) {
            return "Pour les derni√®res actualit√©s, consultez vos sources d'information habituelles ou allumez la t√©l√©vision.";
        }
        
        // Questions g√©n√©rales sur Angel
        if (containsKeywords(lowerInput, "qui es-tu", "que fais-tu", "tes capacit√©s", "qui √™tes-vous")) {
            return "Je suis Ang√®le, votre assistante virtuelle. Je peux vous renseigner sur l'heure, la m√©t√©o, les programmes TV et r√©pondre √† vos questions. Vous pouvez me parler naturellement.";
        }
        
        // Salutations
        if (containsKeywords(lowerInput, "bonjour", "salut", "hello", "coucou", "bonsoir")) {
            return getGreetingResponse();
        }
        
        // Au revoir
        if (containsKeywords(lowerInput, "au revoir", "√† bient√¥t", "goodbye", "bye")) {
            return "Au revoir ! N'h√©sitez pas √† me parler quand vous le souhaitez.";
        }
        
        // R√©ponse g√©n√©rale
        if (input.trim().endsWith("?")) {
            return "C'est une excellente question ! Je r√©fl√©chis encore √† ce type de r√©ponse.";
        } else {
            return "Je vous ai bien entendu. Comment puis-je vous √™tre utile ?";
        }
    }
    
    /**
     * V√©rifie si l'entr√©e contient certains mots-cl√©s.
     */
    private boolean containsKeywords(String text, String... keywords) {
        for (String keyword : keywords) {
            if (text.contains(keyword)) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * G√©n√®re une r√©ponse sur l'heure.
     */
    private String getTimeResponse() {
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH'h'mm");
        return "Il est " + now.format(formatter) + ".";
    }
    
    /**
     * G√©n√®re une r√©ponse sur la date.
     */
    private String getDateResponse() {
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE d MMMM yyyy", Locale.FRENCH);
        return "Nous sommes " + now.format(formatter) + ".";
    }
    
    /**
     * G√©n√®re une r√©ponse sur les programmes TV.
     */
    private String getTVResponse() {
        LocalDateTime now = LocalDateTime.now();
        int hour = now.getHour();
        
        if (hour < 8) {
            return "Il est encore t√¥t. Les programmes commencent g√©n√©ralement vers 6h du matin.";
        } else if (hour < 12) {
            return "En matin√©e, vous trouverez des √©missions d'information et des magazines sur les principales cha√Ænes.";
        } else if (hour < 14) {
            return "√Ä l'heure du d√©jeuner, consultez votre guide TV pour les journaux t√©l√©vis√©s de 13h.";
        } else if (hour < 19) {
            return "L'apr√®s-midi propose souvent des documentaires et des √©missions de divertissement.";
        } else if (hour < 21) {
            return "En soir√©e, retrouvez les journaux t√©l√©vis√©s √† 19h et 20h sur les principales cha√Ænes.";
        } else {
            return "En premi√®re partie de soir√©e, vous trouverez films, s√©ries et grandes √©missions.";
        }
    }
    
    /**
     * G√©n√®re une salutation bas√©e sur l'heure.
     */
    private String getGreetingResponse() {
        LocalDateTime now = LocalDateTime.now();
        int hour = now.getHour();
        
        String greeting;
        if (hour >= 5 && hour < 12) {
            greeting = "Bonjour";
        } else if (hour >= 12 && hour < 17) {
            greeting = "Bon apr√®s-midi";
        } else if (hour >= 17 && hour < 21) {
            greeting = "Bonsoir";
        } else {
            greeting = "Bonne soir√©e";
        }
        
        return greeting + " ! Comment allez-vous ? Comment puis-je vous aider ?";
    }
    
    /**
     * D√©termine l'√©motion appropri√©e pour la r√©ponse.
     */
    private String determineEmotionForAnswer(String input, String answer) {
        String lowerInput = input.toLowerCase();
        
        if (containsKeywords(lowerInput, "bonjour", "salut", "comment allez-vous")) {
            return "friendly";
        } else if (containsKeywords(lowerInput, "m√©t√©o", "temps")) {
            return "informative";
        } else if (containsKeywords(lowerInput, "heure", "date")) {
            return "neutral";
        } else if (answer.contains("d√©sol√©") || answer.contains("erreur")) {
            return "apologetic";
        } else {
            return "attentive";
        }
    }
    
    /**
     * Calcule la dur√©e d'affichage bas√©e sur la longueur de la r√©ponse.
     */
    private int calculateDisplayDuration(String text) {
        int baseTime = 3000; // 3 secondes de base
        int timePerChar = 50; // 50ms par caract√®re
        return Math.max(baseTime, text.length() * timePerChar);
    }
}