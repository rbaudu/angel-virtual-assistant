/**
 * Bridge entre le syst√®me Java WakeWordDetector et l'interface JavaScript
 * G√®re la d√©tection des mots-cl√©s et la fallback en mode test
 */
class WakeWordBridge {
    constructor() {
        this.isInitialized = false;
        this.isListening = false;
        this.websocket = null;
        this.fallbackMode = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.callbacks = {
            onWakeWordDetected: [],
            onConnectionStatus: [],
            onError: []
        };

        console.log('üîå WakeWordBridge initialis√©');
    }

    /**
     * Initialise la connection WebSocket avec le backend Java
     */
    async init() {
        if (this.isInitialized) {
            console.log('‚úÖ WakeWordBridge d√©j√† initialis√©');
            return;
        }

        console.log('üöÄ Initialisation WakeWordBridge...');

        try {
            // R√©cup√©rer la configuration
            const config = window.avatarConfigManager?.get('voice.wakeWord') || {
                enabled: true,
                fallbackMode: true
            };

            if (!config.enabled) {
                console.log('‚ö†Ô∏è WakeWord d√©sactiv√© dans la configuration');
                return;
            }

            // Tenter connexion WebSocket
            await this.connectWebSocket();
            
            this.isInitialized = true;
            console.log('‚úÖ WakeWordBridge initialis√© avec succ√®s');

        } catch (error) {
            console.warn('‚ö†Ô∏è Erreur initialisation WakeWordBridge:', error.message);
            
            // Basculer en mode fallback
            this.enableFallbackMode();
        }
    }

    /**
     * √âtablit la connexion WebSocket avec le backend
     */
    async connectWebSocket() {
        return new Promise((resolve, reject) => {
            const contextPath = window.ANGEL_CONFIG?.contextPath || '/';
            const wsUrl = `ws://${window.location.host}${contextPath}ws/wake-word`;

            console.log('üîå Connexion WebSocket:', wsUrl);

            this.websocket = new WebSocket(wsUrl);

            const timeout = setTimeout(() => {
                reject(new Error('Timeout connexion WebSocket'));
            }, 5000);

            this.websocket.onopen = () => {
                clearTimeout(timeout);
                console.log('‚úÖ WebSocket WakeWordDetector connect√©');
                this.reconnectAttempts = 0;
                this.notifyConnectionStatus(true);
                resolve();
            };

            this.websocket.onmessage = (event) => {
                this.handleWebSocketMessage(event);
            };

            this.websocket.onclose = () => {
                clearTimeout(timeout);
                console.log('üîê WebSocket WakeWordDetector ferm√©');
                this.notifyConnectionStatus(false);
                this.attemptReconnect();
            };

            this.websocket.onerror = (error) => {
                clearTimeout(timeout);
                console.error('‚ùå Erreur WebSocket WakeWordDetector:', error);
                this.notifyError(error);
                reject(error);
            };
        });
    }

    /**
     * G√®re les messages re√ßus via WebSocket
     */
    handleWebSocketMessage(event) {
        try {
            const data = JSON.parse(event.data);
            console.log('üì® Message WakeWordDetector:', data);

            switch (data.type) {
                case 'WAKE_WORD_DETECTED':
                    this.handleWakeWordDetected(data);
                    break;
                case 'LISTENING_STATUS':
                    this.handleListeningStatus(data);
                    break;
                case 'ERROR':
                    this.handleError(data);
                    break;
                default:
                    console.warn('‚ö†Ô∏è Type de message inconnu:', data.type);
            }
        } catch (error) {
            console.error('‚ùå Erreur parsing message WebSocket:', error);
        }
    }

    /**
     * Traite la d√©tection d'un mot-cl√©
     */
    handleWakeWordDetected(data) {
        console.log('üéØ Mot-cl√© d√©tect√©:', data.word, 'confidence:', data.confidence);
        
        const event = {
            word: data.word,
            confidence: data.confidence,
            timestamp: Date.now(),
            source: 'java-detector'
        };

        this.notifyWakeWordDetected(event);
    }

    /**
     * G√®re le statut d'√©coute
     */
    handleListeningStatus(data) {
        this.isListening = data.listening;
        console.log(`üé§ WakeWordDetector ${this.isListening ? 'en √©coute' : 'arr√™t√©'}`);
    }

    /**
     * G√®re les erreurs du backend
     */
    handleError(data) {
        console.error('‚ùå Erreur backend WakeWordDetector:', data.message);
        this.notifyError(new Error(data.message));
    }

    /**
     * D√©marre l'√©coute des mots-cl√©s
     */
    async startListening() {
        if (!this.isInitialized) {
            await this.init();
        }

        if (this.fallbackMode) {
            return this.startFallbackListening();
        }

        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            console.log('üé§ D√©marrage √©coute WakeWordDetector...');
            this.websocket.send(JSON.stringify({
                type: 'START_LISTENING'
            }));
        } else {
            console.warn('‚ö†Ô∏è WebSocket non connect√©, mode fallback');
            this.enableFallbackMode();
            this.startFallbackListening();
        }
    }

    /**
     * Arr√™te l'√©coute des mots-cl√©s
     */
    stopListening() {
        if (this.fallbackMode) {
            return this.stopFallbackListening();
        }

        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            console.log('üõë Arr√™t √©coute WakeWordDetector...');
            this.websocket.send(JSON.stringify({
                type: 'STOP_LISTENING'
            }));
        }
    }

    /**
     * Active le mode fallback (simulation pour les tests)
     */
    enableFallbackMode() {
        console.log('üîÑ Activation mode fallback WakeWordDetector');
        this.fallbackMode = true;
        this.isInitialized = true;
        
        // Simuler une connexion
        this.notifyConnectionStatus(true);
    }

    /**
     * D√©marre l'√©coute en mode fallback (simulation)
     */
    startFallbackListening() {
        console.log('üé§ D√©marrage √©coute fallback (simulation)...');
        this.isListening = true;

        // En mode test, simuler la d√©tection occasionnelle
        if (window.ANGEL_CONFIG?.debug?.enabled) {
            this.simulateWakeWordDetection();
        }
    }

    /**
     * Arr√™te l'√©coute en mode fallback
     */
    stopFallbackListening() {
        console.log('üõë Arr√™t √©coute fallback');
        this.isListening = false;
    }

    /**
     * Simule la d√©tection de mots-cl√©s pour les tests
     */
    simulateWakeWordDetection() {
        // Simuler d√©tection apr√®s 10-30 secondes
        const delay = 10000 + Math.random() * 20000;
        
        setTimeout(() => {
            if (this.isListening && this.fallbackMode) {
                const event = {
                    word: 'angel',
                    confidence: 0.85,
                    timestamp: Date.now(),
                    source: 'fallback-simulator'
                };

                console.log('üéØ Simulation d√©tection mot-cl√©:', event);
                this.notifyWakeWordDetected(event);

                // Programmer la prochaine simulation
                this.simulateWakeWordDetection();
            }
        }, delay);
    }

    /**
     * Tente de se reconnecter au WebSocket
     */
    attemptReconnect() {
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            console.warn('‚ö†Ô∏è Nombre max de reconnexions atteint, basculement en mode fallback');
            this.enableFallbackMode();
            return;
        }

        this.reconnectAttempts++;
        const delay = 2000 * this.reconnectAttempts;

        console.log(`üîÑ Tentative reconnexion ${this.reconnectAttempts}/${this.maxReconnectAttempts} dans ${delay}ms...`);

        setTimeout(async () => {
            try {
                await this.connectWebSocket();
            } catch (error) {
                console.warn('‚ö†Ô∏è √âchec reconnexion:', error.message);
            }
        }, delay);
    }

    /**
     * Enregistre un callback pour les d√©tections
     */
    onWakeWordDetected(callback) {
        this.callbacks.onWakeWordDetected.push(callback);
    }

    /**
     * Enregistre un callback pour le statut de connexion
     */
    onConnectionStatus(callback) {
        this.callbacks.onConnectionStatus.push(callback);
    }

    /**
     * Enregistre un callback pour les erreurs
     */
    onError(callback) {
        this.callbacks.onError.push(callback);
    }

    /**
     * Notifie les callbacks de d√©tection
     */
    notifyWakeWordDetected(event) {
        this.callbacks.onWakeWordDetected.forEach(callback => {
            try {
                callback(event);
            } catch (error) {
                console.error('‚ùå Erreur callback wake word:', error);
            }
        });
    }

    /**
     * Notifie les callbacks de statut de connexion
     */
    notifyConnectionStatus(connected) {
        this.callbacks.onConnectionStatus.forEach(callback => {
            try {
                callback(connected);
            } catch (error) {
                console.error('‚ùå Erreur callback connection status:', error);
            }
        });
    }

    /**
     * Notifie les callbacks d'erreur
     */
    notifyError(error) {
        this.callbacks.onError.forEach(callback => {
            try {
                callback(error);
            } catch (error) {
                console.error('‚ùå Erreur callback error:', error);
            }
        });
    }

    /**
     * V√©rifie si le detector est en train d'√©couter
     */
    isCurrentlyListening() {
        return this.isListening;
    }

    /**
     * R√©cup√®re le statut de connexion
     */
    isConnected() {
        return this.isInitialized && (
            this.fallbackMode || 
            (this.websocket && this.websocket.readyState === WebSocket.OPEN)
        );
    }

    /**
     * Nettoyage des ressources
     */
    dispose() {
        console.log('üßπ Nettoyage WakeWordBridge...');
        
        this.stopListening();
        
        if (this.websocket) {
            this.websocket.close();
            this.websocket = null;
        }

        this.callbacks = {
            onWakeWordDetected: [],
            onConnectionStatus: [],
            onError: []
        };

        this.isInitialized = false;
        this.isListening = false;
    }
}

// Instance globale
window.wakeWordBridge = new WakeWordBridge();

// Compatibilit√© avec l'ancien syst√®me
window.WakeWordDetector = window.wakeWordBridge;

console.log('üîå WakeWordBridge disponible globalement');
