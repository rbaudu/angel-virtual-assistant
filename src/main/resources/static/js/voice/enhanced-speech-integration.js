/**
 * Int√©gration de synth√®se vocale am√©lior√©e pour Angel
 * Version optimis√©e qui corrige le probl√®me de l'avatar qui ne parle pas
 * 
 * Fichier : src/main/resources/static/js/voice/enhanced-speech-integration.js
 */

class EnhancedSpeechIntegration {
    constructor() {
        this.currentUtterance = null;
        this.isSpeaking = false;
        this.isEnabled = true;
        this.speechQueue = [];
        this.isProcessingQueue = false;
        
        // Configuration avanc√©e
        this.config = {
            lang: 'fr-FR',
            rate: 0.9,
            pitch: 1.0,
            volume: 0.8,
            maxRetries: 3,
            retryDelay: 1000
        };
        
        this.selectedVoice = null;
        this.voiceLoadAttempts = 0;
        this.maxVoiceLoadAttempts = 10;
        
        this.initialize();
        console.log('üé§ EnhancedSpeechIntegration initialis√©');
    }
    
    /**
     * Initialise le service de synth√®se vocale
     */
    async initialize() {
        if (!('speechSynthesis' in window)) {
            console.warn('‚ö†Ô∏è Speech Synthesis API non support√©e');
            this.isEnabled = false;
            return;
        }
        
        // Initialiser les voix avec retry
        await this.initializeVoicesWithRetry();
        
        // Configurer les √©v√©nements
        this.setupEventListeners();
        
        // D√©marrer le processeur de queue
        this.startQueueProcessor();
        
        console.log('‚úÖ EnhancedSpeechIntegration pr√™t');
    }
    
    /**
     * Initialise les voix avec retry automatique
     */
    async initializeVoicesWithRetry() {
        return new Promise((resolve) => {
            const attemptVoiceLoad = () => {
                const voices = speechSynthesis.getVoices();
                
                if (voices.length > 0) {
                    this.selectBestVoice(voices);
                    console.log('‚úÖ Voix charg√©es avec succ√®s');
                    resolve();
                    return;
                }
                
                this.voiceLoadAttempts++;
                if (this.voiceLoadAttempts >= this.maxVoiceLoadAttempts) {
                    console.warn('‚ö†Ô∏è Impossible de charger les voix, utilisation voix par d√©faut');
                    resolve();
                    return;
                }
                
                console.log(`üîÑ Tentative ${this.voiceLoadAttempts}/${this.maxVoiceLoadAttempts} de chargement des voix`);
                setTimeout(attemptVoiceLoad, 500);
            };
            
            // √âv√©nement voiceschanged avec timeout
            const voicesChangedHandler = () => {
                attemptVoiceLoad();
                speechSynthesis.removeEventListener('voiceschanged', voicesChangedHandler);
            };
            
            speechSynthesis.addEventListener('voiceschanged', voicesChangedHandler);
            
            // Premi√®re tentative imm√©diate
            attemptVoiceLoad();
        });
    }
    
    /**
     * S√©lectionne la meilleure voix disponible
     */
    selectBestVoice(voices) {
        console.log(`üéµ ${voices.length} voix disponibles`);
        
        // Pr√©f√©rences de voix par ordre de priorit√©
        const voicePreferences = [
            // Voix fran√ßaises f√©minines sp√©cifiques
            { lang: 'fr-FR', gender: 'female', names: ['Alice', 'Marie', 'Hortense', 'Am√©lie'] },
            // Voix fran√ßaises g√©n√©riques
            { lang: 'fr-FR', gender: 'female', names: [] },
            { lang: 'fr-CA', gender: 'female', names: [] },
            { lang: 'fr', gender: 'female', names: [] },
            // Fallback vers n'importe quelle voix fran√ßaise
            { lang: 'fr-FR', gender: null, names: [] },
            { lang: 'fr', gender: null, names: [] }
        ];
        
        for (const pref of voicePreferences) {
            let voice = null;
            
            // Chercher d'abord par nom sp√©cifique
            if (pref.names.length > 0) {
                voice = voices.find(v => 
                    v.lang.startsWith(pref.lang) &&
                    pref.names.some(name => v.name.toLowerCase().includes(name.toLowerCase()))
                );
            }
            
            // Puis par genre et langue
            if (!voice && pref.gender) {
                voice = voices.find(v => 
                    v.lang.startsWith(pref.lang) &&
                    (v.name.toLowerCase().includes(pref.gender) ||
                     v.name.toLowerCase().includes('female') ||
                     v.name.toLowerCase().includes('femme'))
                );
            }
            
            // Enfin par langue seulement
            if (!voice) {
                voice = voices.find(v => v.lang.startsWith(pref.lang));
            }
            
            if (voice) {
                this.selectedVoice = voice;
                console.log(`üé§ Voix s√©lectionn√©e: ${voice.name} (${voice.lang})`);
                return;
            }
        }
        
        // Fallback vers la premi√®re voix disponible
        if (voices.length > 0) {
            this.selectedVoice = voices[0];
            console.log(`üé§ Voix fallback: ${voices[0].name} (${voices[0].lang})`);
        }
    }
    
    /**
     * Configure les √©couteurs d'√©v√©nements
     */
    setupEventListeners() {
        // Intercepter les messages WebSocket pour synth√®se vocale
        document.addEventListener('angelWebSocketMessage', (event) => {
            this.handleWebSocketMessage(event.detail);
        });
        
        // Fallback pour interception directe des WebSockets
        setTimeout(() => {
            this.interceptWebSocketMessages();
        }, 2000);
    }
    
    /**
     * Intercepte les messages WebSocket existants
     */
    interceptWebSocketMessages() {
        // Chercher les WebSockets possibles
        const possibleSockets = [
            window.voiceWebSocket,
            window.wakeWordDetector?.websocket,
            window.websocket,
            window.ws
        ];
        
        for (const socket of possibleSockets) {
            if (socket && socket.readyState === WebSocket.OPEN) {
                console.log('üîå WebSocket trouv√© pour interception');
                
                const originalOnMessage = socket.onmessage;
                socket.onmessage = (event) => {
                    const handled = this.handleWebSocketMessage(event.data);
                    if (!handled && originalOnMessage) {
                        originalOnMessage(event);
                    }
                };
                
                return;
            }
        }
        
        // R√©essayer plus tard
        setTimeout(() => this.interceptWebSocketMessages(), 2000);
    }
    
    /**
     * Traite les messages WebSocket pour synth√®se vocale
     */
    handleWebSocketMessage(data) {
        try {
            let message;
            if (typeof data === 'string') {
                message = JSON.parse(data);
            } else {
                message = data;
            }
            
            console.log('üì® Message WebSocket re√ßu pour TTS:', message.type);
            
            if (message.type === 'AVATAR_SPEAK' && message.text) {
                console.log('üéØ D√âCLENCHEMENT SYNTH√àSE VOCALE D√âTECT√â:', message.text);
                this.speakWithQueue(message.text, message.emotion || 'neutral');
                return true;
            }
            
            return false;
            
        } catch (error) {
            console.error('‚ùå Erreur traitement message WebSocket pour TTS:', error);
            return false;
        }
    }
    
    /**
     * Ajoute un texte √† la queue de synth√®se vocale
     */
    speakWithQueue(text, emotion = 'neutral', priority = false) {
        if (!this.isEnabled || !text || text.trim() === '') {
            console.log('‚è∏Ô∏è Synth√®se vocale d√©sactiv√©e ou texte vide');
            return Promise.resolve();
        }
        
        const speechItem = {
            text: text.trim(),
            emotion,
            timestamp: Date.now(),
            retries: 0,
            id: Math.random().toString(36).substr(2, 9)
        };
        
        if (priority) {
            this.speechQueue.unshift(speechItem);
        } else {
            this.speechQueue.push(speechItem);
        }
        
        console.log(`üìù Ajout√© √† la queue TTS (${this.speechQueue.length} √©l√©ments):`, text);
        
        return new Promise((resolve, reject) => {
            speechItem.resolve = resolve;
            speechItem.reject = reject;
        });
    }
    
    /**
     * D√©marre le processeur de queue
     */
    startQueueProcessor() {
        if (this.isProcessingQueue) return;
        
        this.isProcessingQueue = true;
        
        const processQueue = async () => {
            while (this.speechQueue.length > 0 && this.isEnabled) {
                const item = this.speechQueue.shift();
                
                try {
                    await this.speakNow(item.text, item.emotion);
                    if (item.resolve) item.resolve();
                    
                } catch (error) {
                    console.error(`‚ùå Erreur synth√®se vocale pour "${item.text}":`, error);
                    
                    if (item.retries < this.config.maxRetries) {
                        item.retries++;
                        console.log(`üîÑ Retry ${item.retries}/${this.config.maxRetries}`);
                        this.speechQueue.unshift(item); // Remettre en d√©but de queue
                        await this.delay(this.config.retryDelay);
                    } else {
                        console.error('‚ùå √âchec d√©finitif de synth√®se:', error);
                        if (item.reject) item.reject(error);
                    }
                }
                
                // Petite pause entre les √©l√©ments
                await this.delay(200);
            }
            
            this.isProcessingQueue = false;
            
            // Red√©marrer le processeur s'il y a de nouveaux √©l√©ments
            if (this.speechQueue.length > 0) {
                setTimeout(() => this.startQueueProcessor(), 100);
            }
        };
        
        processQueue();
    }
    
    /**
     * Synth√®se vocale imm√©diate
     */
    async speakNow(text, emotion = 'neutral') {
        return new Promise((resolve, reject) => {
            try {
                // Arr√™ter la synth√®se en cours
                this.stopSpeaking();
                
                console.log(`üó£Ô∏è SYNTH√àSE IMM√âDIATE (${emotion}):`, text);
                
                // Cr√©er l'utterance
                this.currentUtterance = new SpeechSynthesisUtterance(text);
                
                // Configuration de la voix
                if (this.selectedVoice) {
                    this.currentUtterance.voice = this.selectedVoice;
                }
                
                this.currentUtterance.lang = this.config.lang;
                this.currentUtterance.rate = this.getEmotionRate(emotion);
                this.currentUtterance.pitch = this.getEmotionPitch(emotion);
                this.currentUtterance.volume = this.config.volume;
                
                // Gestionnaires d'√©v√©nements
                this.currentUtterance.onstart = () => {
                    this.isSpeaking = true;
                    console.log('‚ñ∂Ô∏è Synth√®se vocale d√©marr√©e');
                    this.updateUI(true);
                };
                
                this.currentUtterance.onend = () => {
                    this.isSpeaking = false;
                    console.log('‚èπÔ∏è Synth√®se vocale termin√©e');
                    this.updateUI(false);
                    resolve();
                };
                
                this.currentUtterance.onerror = (event) => {
                    this.isSpeaking = false;
                    console.error('‚ùå Erreur synth√®se vocale:', event.error);
                    this.updateUI(false);
                    reject(new Error(`Erreur TTS: ${event.error}`));
                };
                
                // D√©marrer la synth√®se
                speechSynthesis.speak(this.currentUtterance);
                
                // V√©rification de d√©marrage
                setTimeout(() => {
                    if (!this.isSpeaking && !speechSynthesis.speaking) {
                        console.warn('‚ö†Ô∏è La synth√®se ne semble pas avoir d√©marr√©');
                        reject(new Error('Synth√®se non d√©marr√©e'));
                    }
                }, 500);
                
            } catch (error) {
                console.error('‚ùå Erreur cr√©ation utterance:', error);
                reject(error);
            }
        });
    }
    
    /**
     * Arr√™te la synth√®se vocale
     */
    stopSpeaking() {
        if (this.isSpeaking || speechSynthesis.speaking) {
            speechSynthesis.cancel();
            this.isSpeaking = false;
            this.updateUI(false);
            console.log('‚è∏Ô∏è Synth√®se vocale arr√™t√©e');
        }
        
        // Vider la queue
        this.speechQueue.length = 0;
    }
    
    /**
     * Adapte le d√©bit selon l'√©motion
     */
    getEmotionRate(emotion) {
        const rates = {
            'excited': 1.2,
            'happy': 1.1,
            'friendly': 1.0,
            'neutral': 0.9,
            'informative': 0.85,
            'attentive': 0.85,
            'helpful': 0.9,
            'sad': 0.7,
            'concerned': 0.8,
            'thoughtful': 0.8,
            'apologetic': 0.75
        };
        
        return rates[emotion] || this.config.rate;
    }
    
    /**
     * Adapte la hauteur selon l'√©motion
     */
    getEmotionPitch(emotion) {
        const pitches = {
            'excited': 1.3,
            'happy': 1.2,
            'friendly': 1.1,
            'neutral': 1.0,
            'informative': 0.95,
            'attentive': 0.95,
            'helpful': 1.0,
            'sad': 0.8,
            'concerned': 0.85,
            'thoughtful': 0.9,
            'apologetic': 0.85
        };
        
        return pitches[emotion] || this.config.pitch;
    }
    
    /**
     * Met √† jour l'interface utilisateur
     */
    updateUI(isSpeaking) {
        // Avatar parlant
        const avatarElements = document.querySelectorAll('#avatar-container, .avatar-container, [data-avatar], #avatar');
        avatarElements.forEach(element => {
            if (isSpeaking) {
                element.classList.add('speaking');
            } else {
                element.classList.remove('speaking');
            }
        });
        
        // √âv√©nement personnalis√©
        const event = new CustomEvent('angelSpeechStateChanged', {
            detail: { isSpeaking, timestamp: Date.now() }
        });
        document.dispatchEvent(event);
    }
    
    /**
     * Fonction utilitaire de d√©lai
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    /**
     * Test de synth√®se vocale
     */
    testSpeech() {
        console.log('üß™ Test de synth√®se vocale am√©lior√©e...');
        return this.speakWithQueue('Test de synth√®se vocale am√©lior√©e. Vous m\'entendez bien ?', 'neutral');
    }
    
    /**
     * Diagnostic du syst√®me
     */
    getDiagnostics() {
        return {
            isEnabled: this.isEnabled,
            isSpeaking: this.isSpeaking,
            selectedVoice: this.selectedVoice ? {
                name: this.selectedVoice.name,
                lang: this.selectedVoice.lang
            } : null,
            queueLength: this.speechQueue.length,
            isProcessingQueue: this.isProcessingQueue,
            voiceLoadAttempts: this.voiceLoadAttempts,
            speechSynthesisState: {
                speaking: speechSynthesis.speaking,
                pending: speechSynthesis.pending,
                paused: speechSynthesis.paused
            }
        };
    }
    
    /**
     * Nettoie les ressources
     */
    destroy() {
        this.stopSpeaking();
        this.speechQueue.length = 0;
        this.isProcessingQueue = false;
        console.log('üßπ EnhancedSpeechIntegration nettoy√©');
    }
}

// Initialisation automatique
let enhancedSpeechIntegration = null;

function initializeEnhancedSpeechIntegration() {
    if (enhancedSpeechIntegration) {
        console.log('üîÑ EnhancedSpeechIntegration d√©j√† initialis√©');
        return enhancedSpeechIntegration;
    }
    
    enhancedSpeechIntegration = new EnhancedSpeechIntegration();
    window.enhancedSpeechIntegration = enhancedSpeechIntegration;
    
    // Compatibilit√© avec l'ancienne API
    window.avatarSpeech = {
        speak: (text, emotion) => enhancedSpeechIntegration.speakWithQueue(text, emotion),
        testSpeech: () => enhancedSpeechIntegration.testSpeech(),
        stopSpeaking: () => enhancedSpeechIntegration.stopSpeaking()
    };
    
    console.log('‚úÖ EnhancedSpeechIntegration disponible globalement');
    return enhancedSpeechIntegration;
}

// Initialisation
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(initializeEnhancedSpeechIntegration, 1000);
});

if (document.readyState !== 'loading') {
    setTimeout(initializeEnhancedSpeechIntegration, 1000);
}

// Nettoyage
window.addEventListener('beforeunload', () => {
    if (enhancedSpeechIntegration) {
        enhancedSpeechIntegration.destroy();
    }
});

console.log('üìú enhanced-speech-integration.js charg√©');